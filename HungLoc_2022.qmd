---
title: "Hung Loc Agriculture Research Center trials"
author: "Luis Fernando Delgado Munoz"
format: html
code-fold: true
code-tools: true
editor: visual
---

# Introduction

This is a document showing the data analysis of two trials in Vietman. The trials were managed by Hung Loc Agriculture Research Center. The localities were:

-   Dong Nai
-   Tay Ninh

## Load the libraries

```{r}
rm(list = ls())
library(pacman)
pacman::p_load(tidyverse, fauxnaif, readxl, yarrr, dplyr, knitr, rmarkdown, statgenSTA, statgenGxE, openxlsx, QBMS, magrittr, agriutilities, asreml, SpATS)
source("https://raw.githubusercontent.com/Cassava2050/PPD/main/utilities_tidy.R")
```

## Load the files to check

```{r}
local_file <- "yes" # "no"
if (local_file == "yes") {
  folder <- "D:\\OneDrive - CGIAR\\Data Analysis\\HungLoc_2022\\data\\"
  file <- "phenotype1.csv"
  skip_col <- 3 # double check the number of col skipped
  trial_interest = "DMF1C"
  year_interest <- 2022
}
# 1) load the data
sel_data <- read_cassavabase(phenotypeFile = paste0(folder, file))
```

## Change columns into standar names

```{r}
# ---- Change columns into standar names ----
sel_data_kp <- change_colname(sel_data, NA)
```

## change the column class

```{r}
obs_col <- c(
  names(sel_data_kp)[str_detect(names(sel_data_kp), "obs_")],
  "use_rep_number", "blockNumber",
  "use_plot_number", "use_plot_width",
  "use_plot_length"
)
sel_data_kp %<>%
  mutate(across(all_of(obs_col), as.numeric))

names(sel_data_kp) = gsub("-", "_", names(sel_data_kp))
```

## Duplications in row and cols

```{r}
duplicated_plot <- row_col_dup(sel_data_kp)
```

### Visualize layout

```{r}
trial_layout(sel_data_kp)
```

## Check the clone name

```{r}
cloneName_new_old <- check_clone_name(
  clone_list = sel_data_kp$use_accession_name,
  new_names = NA,
  add_check = NULL
)

trial_standard <- sel_data_kp %>%
  left_join(cloneName_new_old,
    by = c("use_accession_name" = "accession_name_ori")
  ) %>%
  select(-use_accession_name) %>%
  rename(use_accession_name = use_accession_name.y)
```

## Add GIS data

```{r}
trial_standard <- add_GIS(trial_standard)
```

```{r}
accession_rep_ct <- trial_standard %>%
  count(use_trial_name, use_accession_name, use_rep_number)  %>%
  arrange(use_trial_name) %>%
  filter(n>1)
accession_rep_ct %>% filter(n == 2)
```

Some genotypes different to checks have more than one replicate.

## plot plant number

```{r}
plants_plot <- trial_standard %>%
  group_by(use_trial_name) %>%
  count(obs_planted_number_plot) 

plants_plot
```

## Area per plant

```{r}
area_freq <- table((trial_standard$use_plot_width*trial_standard$use_plot_length)/4) %>% 
  as.data.frame()
colnames(area_freq) = c("area", "freq")
area_freq
```

## Plot area and plot_number_plant

```{r}
plants_plot %>% 
  ggplot(aes(x = use_trial_name, y = n, fill = factor(obs_planted_number_plot))) +
  geom_bar(stat = "identity", col = "black") +
  geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.25) +
  labs(x = NULL, y = "Freq", fill = "Plants per plot") +
  theme_xiaofei()
```

## Compute germination, yield, yield_starch

```{r}
trial_standard_new <- trial_standard %>%
  mutate(obs_harvest_number_plan =
           ifelse(str_detect(use_trial_name, "2022") &  str_detect(use_trial_name , "DMF1C") ,
                  4, obs_harvest_number_plan),
         obs_germination_perc = obs_germinated_number_plot/obs_planted_number_plot * 100,
         # 2) calculate area per plant
         area_plant = (use_plot_length*use_plot_width)/obs_harvest_number_plan,
         # 3) calculate the yield_v4 obs_planted_number_plot
         obs_yield_ha_v2 = (((obs_root_weight_plot*10000)/(area_plant*obs_harvest_number_plan))/1000))


trial_standard_new %>% select(use_plot_name, use_plot_length, use_plot_width, obs_yield_ha, obs_yield_ha_v2)

trial_standard$obs_planted_number_plot %>% unique
```

According to Phoung, the root yield data is the weight per plot, not the yield per hectare. Lizbeth needs to fix this error in cassava Base, first she needs makes the calculation of yield base on plant distance and the reload the correct values.

## Plot the yield_v2 vs yiel upload by Lizbeth

```{r}
library(plotly)

p1 <- trial_standard_new %>% ggplot() +
  geom_point(aes(x = obs_yield_ha, y = obs_yield_ha_v2, color = factor(obs_planted_number_plot))) +
  facet_wrap(~use_trial_name) +
  theme_xiaofei()

ggplotly(p1)
detach("package:plotly", unload = TRUE)
```

## Fixing some issues

```{r}

# fixing the issues
# coalesce branch_number with branch_number_9mon. Are the same variables.
# obs_height, obs_height_wt_leaf. They are the same variables
trial_standard_new <-
  trial_standard_new %>%
  mutate(
    obs_branch_number =
      coalesce(obs_branch_number, obs_branch_number_9mon)
  ) %>%
  mutate(obs_height =
           coalesce(obs_height, obs_height_wt_leaf)
  ) %>% 
  select(-c("obs_branch_number_9mon", "obs_height_wt_leaf"))
```

## Calculate starch yield

```{r}
trial_standard_new <-
  trial_standard_new %>%
  mutate(obs_starch_yield_ha = obs_starch_content * obs_yield_ha_v2 / 100)
```

## Is numeric all traits?

```{r}
is_numeric(trial_data = trial_standard_new)
```

## Get the tidy data

```{r}
meta_info = names(trial_standard_new)[str_detect(names(trial_standard_new), "use_")]
meta_info = gsub("use_", "", meta_info)
meta_info
trial_tidy = trial_standard_new
names(trial_tidy)= gsub("use_", "", names(trial_standard_new))

# observations
trait_list = names(trial_tidy)[str_detect(names(trial_tidy), "obs_")]
trait_list = gsub("obs_", "", trait_list)
trait_list
names(trial_tidy)= gsub("obs_", "", names(trial_tidy))
trial_tidy = trial_tidy[c(meta_info, trait_list)]
```

# Boxplots

```{r warning=FALSE}
# remove columns with all NA
my_dat_noNA <- trial_tidy[, colSums(is.na(trial_tidy)) < nrow(trial_tidy)]
trait_wanted <- names(my_dat_noNA)[names(my_dat_noNA) %in% trait_list]
for (i in 1:length(trait_wanted)) {
  y_DATA <- my_dat_noNA[[trait_wanted[i]]] # data frame or vector?
  x_DATA <- my_dat_noNA$trial_name
  my_DATA <- my_dat_noNA
  y_LABEL <- trait_wanted[i]
  x_LABEL <- NULL
  TITLE <- NULL
  y_MAX <- max(y_DATA, na.rm = TRUE) * 1.2
  y_MIN <- 0
  plot_box <- ggplot(my_DATA, aes(x = x_DATA, y = y_DATA)) +
    geom_violin(trim = FALSE, fill = "gray") +
    geom_boxplot(width = 0.2) +
    coord_cartesian(ylim = c(y_MIN, y_MAX)) +
    theme_xiaofei() +
    labs(
      y = y_LABEL, x = x_LABEL,
      title = TITLE
    )
  plot(plot_box)
}
```

## Save the tidy data for analysis

```{r eval=FALSE}
write.csv(trial_tidy, here::here("output", paste("01_", year_interest, trial_interest,
  "_tidy_data4analysis_", Sys.Date(), ".csv", sep = "")), row.names = FALSE)
```

# Statistical data analysis

## master_data to save the results

```{r}
master_data <- list()
```

## Load the tidy data

```{r}
trial_set_number = 1

# all files in the folder
list_file = list.files(here::here("output"))
# tidy data of the trials interested
sel_file = list_file[str_detect(list_file, "_tidy_data4analysis_") &
                       str_detect(list_file,
                                  paste(year_interest, trial_interest, sep=""))]
sel_file
# the data we will use
sel_file_use = sel_file[2]

trial1_tidy = read.csv(here::here("output", sel_file_use), header=TRUE,
                        stringsAsFactors = FALSE,
                        as.is=T,
                        check.names = FALSE)

if(trial_set_number == 1){
  trial_tidy_all = trial1_tidy
}

```

## Obtain all the trait information using a cloud file (gitHub) -------

```{r}
trait_all <-
  read.csv("https://raw.githubusercontent.com/lfdelgadom/standar_col_names_CB/main/standar_col_names.csv") %>%
  select(analysis_col_name) %>%
  filter(str_detect(analysis_col_name, "obs_"))
trait_all_adj <- gsub("obs_", "", trait_all$analysis_col_name)
trait_all_adj = c(trait_all_adj,
                  "harvest_number_plan", "germination_perc",
                  "yield_ha_v2", "starch_yield_ha", "starch_content")
trait_all_adj <- gsub("-", "_", trait_all_adj)
```

## Meta info.

```{r}
meta_all <-
  read.csv("https://raw.githubusercontent.com/lfdelgadom/standar_col_names_CB/main/standar_col_names.csv") %>%
  select(analysis_col_name) %>%
  filter(str_detect(analysis_col_name, "use_"))
meta_all_adj <- gsub("use_", "", meta_all$analysis_col_name)
meta_all_adj <- c(
  meta_all_adj,
  "check_released", "latitude", "longitude",
  "altitude", "department", "country",
  "ag_zone", "location_short"
)
```

## Select the observations for analysis

```{r}
names(trial_tidy_all) <- gsub("-", "_", names(trial_tidy_all))
analysis_trait_v1 <- names(trial_tidy_all)[names(trial_tidy_all) %in% trait_all_adj]
print("All the traits investigated:")
print(analysis_trait_v1)
```

## Select the meta information for analysis

```{r}
meta_col <- names(trial_tidy_all)[names(trial_tidy_all) %in% meta_all_adj]
print("All the meta information:")
print(meta_col)
```

## Check the SD of each trait

```{r}
my_dat = trial_tidy_all 
analysis_trait = analysis_trait_v1
meta_info = meta_col

remove_no_var_tidy(my_dat)
master_data[["mean_of_sd"]] = sd_mean[order(sd_mean$mean_of_sd),]
```

## Trait ideal

```{r}
trait_ideal <- analysis_trait[-c(8, 10:12, 15:21, 23:27)]
print("the trait ideal is:"); trait_ideal
```

## Summary tables

```{r}
i <- 1
for (var in trait_ideal) {
  # summary tables
  summ <- my_dat %>%
    distinct(trial_name, plot_name, rep_number, accession_name, .data[[var]]) %>%
    group_by(trial_name) %>%
    summarise(
      n_gen = n_distinct(accession_name),
      n_reps = n_distinct(rep_number),
      n_total = n(),
      n_missing = sum(is.na(.data[[var]])),
      n_percent = n_missing / n_total,
      zeros = sum(.data[[var]] == 0, na.rm = TRUE),
      rcbd = ifelse(n_reps > 1, TRUE, FALSE),
      design = ifelse(n_reps == 1, "unrep", design)
    ) %>%
    type.convert() %>%
    arrange(n_gen)
  summ <- summ %>%
    as.data.frame() %>%
    mutate(trait = var) %>%
    print(n = Inf)
  if (i == 1) {
    resum_tables <- summ
  } else {
    resum_tables <- rbind.data.frame(resum_tables, summ)
  }
  i <- i + 1
  master_data[[paste0("summary_", trial_interest)]] <- resum_tables
}
```

# Modeling single trial

## Spatial Model

```{r}
# factor
my_dat$accession_name = as.factor(my_dat$accession_name)
# create a factor of row and cols
my_dat$R <- as.factor(my_dat$row_number)
my_dat$C <- as.factor(my_dat$col_number)
```

## Set location experiment

```{r}
#loca <- "dona" # -------select one
loca <- "tani"
# ---------------------------------------------------
data_location <- my_dat %>% filter(str_ends(trial_name, loca)) #"tani"
# n segments
ncols = length(unique(data_location$C))
nrows = length(unique(data_location$R))
```

```{r warning=FALSE}
gen = "accession_name"
h2 <- c()
i <- 1

for (trait in trait_ideal[-c(12)]) {  #CMD1mon, germination_percent did nor fit for tani
  mo_spatial <- SpATS(
    response = trait,
    genotype = "accession_name",
    genotype.as.random = T,
    fixed = NULL,
    spatial = ~ PSANOVA(col_number,
      row_number,
      nseg = c(ncols, nrows),
      degree = c(3, 3),
      nest.div = 2
    ),
    random = ~ R + C,
    data = data_location,
    control = list(tolerance = 1e-03, monitoring = 1)
  )
  plot(mo_spatial)
  var.m0 <- variogram(mo_spatial)
  plot(var.m0)
  ng <- length(mo_spatial$terms$geno$geno_names)
  g.SpATS <-
    mo_spatial$coeff[1:ng] %>%
    data.frame(coeff = .) %>%
    rownames_to_column(gen) %>%
    mutate(
      variable = trait,
      BLUP = mo_spatial$fitted[1:ng]
    ) %>%
    filter(accession_name %in% data_location$accession_name) %>%
    select(-coeff)

    h2[i] <- getHeritability(mo_spatial)
  names(h2)[i] <- trait
  if (i == 1) {
    pvals_table <- g.SpATS
  } else {
    pvals_table <- rbind.data.frame(pvals_table, g.SpATS)
  }
  i <- i + 1
}
```

I need to learn how to extract the genotypic BLUEs from a nonreplicate trial with SPATS.

## Save the BLUPs

```{r}
pvals_table <- pvals_table %>%
  group_by(variable, accession_name) %>%
  spread(variable, value = BLUP) %>%
  ungroup() 
#save the BLUPs data
master_data[[paste0("BLUPs_", loca)]] <- pvals_table
```

## Save the heritabilities for both locations

```{r}
h2 <- h2 %>%
  as.data.frame() %>%
  tibble::rownames_to_column("trait")
colnames(h2) <- c("var", "h2")
h2 <- h2 %>% arrange(desc(h2))
# save the heritability
master_data[[paste0("h2_", loca)]] <- h2
```


# Multienviromental analysis

```{r}
variables <- trait_ideal[-12]
h2_fa <- c()
data_MET <- my_dat

```

```{r}
# Loop for all the traits
i = 1
for (var in variables) {
  
  cat("\n_______________")
  cat("\nVARIABLE:", var, "\n")
  cat("_______________\n")
  
  # summary by accession
  raw_g <- data_MET %>% 
    group_by(accession_name) %>% 
    summarize(mean    = mean(.data[[var]], na.rm = T),
              std.dev = sd(.data[[var]], na.rm = T),
              n  = n(),
              cv      = std.dev/mean,
              n_missing  = sum(is.na(.data[[var]])),
              n_percent = n_missing/n , 
              n_zero = sum(.data[[var]] == 0, na.rm = T),
              var = var
    ) 
  
  # summary by trial
  raw_m <- data_MET %>% 
    group_by(trial_name) %>% 
    summarize(mean    = mean(.data[[var]], na.rm = T),
              std.dev = sd(.data[[var]], na.rm = T),
              n  = n(),
              cv      = std.dev/mean,
              n_missing  = sum(is.na(.data[[var]])),
              n_percent = n_missing/n , 
              n_zero = sum(.data[[var]] == 0, na.rm = T),
              var = var
    ) %>% 
    arrange(desc(mean)) %>% 
    print(n=Inf) # print full table
  
  exp <- raw_m %>% filter(n_percent<=0.8) %>% pull(trial_name)
  
  data_MET_tmp <- data_MET %>% filter(trial_name %in% exp) %>% droplevels()
  
  # -------------------------------------------------------------------------
  # modelling
  # -------------------------------------------------------------------------
  
  data_MET_tmp$col_f <- as.factor(data_MET_tmp$col_number)
  data_MET_tmp$row_f <- as.factor(data_MET_tmp$row_number)
  data_MET_tmp$trial <- as.factor(data_MET_tmp$trial_name)
  data_MET_tmp$accession <- as.factor(data_MET_tmp$accession_name)
  
  # GxE Factor Analytic + Genotype as Random + row_col + ar1
  equation_fixed <-  reformulate(c("1", "trial"), response = var)
  
  if(length(exp)<=2){
    equation_rand <-  reformulate(c("fa(trial, 1):accession",
                                   "at(trial):col_f",  
                                   "at(trial):row_f"))
  } else {
    equation_rand <-  reformulate(c("fa(trial, 2):accession",
                                   "at(trial):col_f",  
                                   "at(trial):row_f"))
  }
  
  if(i >= 2) rm(m5) # when i>= 2, please remove the model
  m5 <- asreml(fixed = equation_fixed ,
               random = equation_rand,  
               residual = ~ units,   
               data = data_MET_tmp, 
               na.action = list(x="include",y="include"), 
               maxiter=100,
               trace=F)
  m5 <- update(m5)
  m5 <- update(m5)
  
  # Genotype as Fixed + row_col + ar1
  equation_fixed <-  reformulate(c("1", "trial", "accession"), response = var)
  equation_rand <-  reformulate(c("trial:accession", "at(trial):col_f", "at(trial):row_f"))
  
  if(i >= 2) rm(m6)
  m6 <- asreml(fixed = equation_fixed ,
               random = equation_rand,  
               residual = ~ units,   
               data = data_MET_tmp, 
               na.action = list(x="include",y="include"), 
               maxiter=100,
               trace=F)
  m6 <- update(m6)
  m6 <- update(m6)
  
  # BLUPs
  pvalsBLUPs <- predict(m5, classify = "accession", pworkspace = "1gb")$pvals %>% select(-status) %>%  mutate(var = var)

  # BLUEs
  pvalsBLUEs <- predict(m6, classify = "accession", pworkspace = "1gb")$pvals %>% select(-status) %>%  mutate(var = var)
  
  # heritability
   h2_fa[i] <- agriutilities::heritability_fa(
    model_fa = m5,
    genotype = "accession",
    env = "trial",
    vc_model = "fa1"
  )
  names(h2_fa)[i] <- var
  
  # stacked table
  
  if(i == 1){
    BLUPs_tables <- pvalsBLUPs
    BLUEs_tables <- pvalsBLUEs
    raw_tables <- raw_m
    raw_tables_g <- raw_g
  } else {
    BLUPs_tables <- rbind.data.frame(BLUPs_tables, pvalsBLUPs)
    BLUEs_tables <- rbind.data.frame(BLUEs_tables, pvalsBLUEs)
    raw_tables <- rbind.data.frame(raw_tables, raw_m)
    raw_tables_g <- rbind.data.frame(raw_tables_g, raw_g)
  }
  i <- i + 1
  
}


```

## Save both heritabilities

```{r}
h2_fa <- h2_fa %>%
  as.data.frame() %>%
  pivot_longer(cols = everything(), names_to = "trait", values_to = "h2") %>% 
  arrange(desc(h2))
  
# save the heritability
master_data[[paste0("h2_", "gxe")]] <- h2_fa
```

## Save the gxe BLUPs

```{r}
BLUPs_table <- BLUPs_tables %>% 
  select(-std.error) %>% 
  group_by(var, accession) %>%
  spread(var, value = predicted.value) %>%
  ungroup() %>% 
  rename("accession_name" = accession)
#save the BLUPs data
master_data[[paste0("BLUPs_", "gxe")]] <- BLUPs_table
```

## Save the BLUEs or raw data across the trials

```{r}

for (var in variables) {
  #var = "branch_number"
  blue_blup <- my_dat %>% 
    select(trial_name, accession_name, .data[[var]]) %>% 
     group_by(trial_name, accession_name) %>% 
     summarize_at(vars(var), mean, na.rm = T) %>% 
    pivot_wider(names_from = trial_name, values_from = .data[[var]]) %>%
    right_join(BLUPs_table %>%
    select(accession_name, matches(var)), by = "accession_name")
  # remove all NA columns
  blue_blup <- blue_blup[, colSums(is.na(blue_blup)) < nrow(blue_blup)]
  master_data[[paste0("BLUP_BLUE_", var)]] <- blue_blup
}
```

## Save the master data results

```{r}
folder_output <- here::here("output//")

meta_file_name <- paste0(folder_output, paste0("HungLoc_", trial_interest, "_master_results_", Sys.Date(), "_.xlsx" ))

write.xlsx(master_data, file = meta_file_name)
```

## Index selection

```{r}
list_file <- list.files(folder_output)
sel_file <- list_file[str_detect(list_file, "_master_results_") &
  str_detect(list_file, trial_interest)]
sel_file[1]
blupDF_kp <- read_excel(
  paste(folder_output,
    sel_file[1],
    sep = ""
  ),
  sheet = paste0("BLUPs_", "gxe")
)
```

## Selection index

```{r}
colnames(blupDF_kp)
index_col <- colnames(blupDF_kp)[c(2, 11, 13)] 

index_dat <- blupDF_kp %>%
  select("accession_name", all_of(index_col)) %>%
  column_to_rownames("accession_name")
```


## Johan's function

```{r}
# multi-trait -------------------------------------------------------------
library(explor)
library(FactoMineR)
library(factoextra)
library(cowplot)
library(ggpubr)
pca_index <- function(data, id, variables = NULL, percentage = 0.20, b) {
  # The data set to be analyzed. It should be in the form of a data frame.
  data <- as.data.frame(data)
  rownames(data) <- data[, id]
  if (is.null(variables)) variables <- names(data)[names(data) != id]
  data <- data[, variables]
  index <- selIndex(Y = as.matrix(data), b = b, scale = T)
  index <- c(index)
  data$index <- index
  data <- data %>% arrange(desc(index))
  data$selected <- NA
  data$selected[1:(round(percentage * nrow(data)))] <- TRUE
  data$selected <- ifelse(is.na(data$selected), FALSE, data$selected)
  res.pca <- PCA(data, graph = T, scale.unit = T, quali.sup = ncol(data))
  p1 <- fviz_pca_var(res.pca, col.var = "black", repel = T) +
  theme_xiaofei()
  p2 <- fviz_pca_ind(res.pca,
    label = "none", habillage = data$selected,
    palette = c("#00AFBB", "#FC4E07"), addEllipses = T
  ) +
  theme_xiaofei()
  # labs(title =  paste("Selection:",
  #                     paste0(percentage*100,"%")),
  #      subtitle = paste("Weights:", "(", paste0(b, collapse = ', '),")"  ))
  final <- ggdraw() +
  draw_plot(p1, x = 0, y = 0, width = .5, height = 1) +
  draw_plot(p2, x = .5, y = 0.2, width = .5, height = 0.6) +
  draw_plot_label(
    label = c("A", "B"), size = 15,
    x = c(0, 0.5), y = c(1, 1)
  )
  
  # final <- ggarrange(p1, p2, legend = "bottom", common.legend = T)
  # final <- annotate_figure(final,
  #   top = text_grob(paste(
  #     "Selection:",
  #     paste0(percentage * 100, "%"), "\n",
  #     paste("Weights:", "(", paste0(b, collapse = ", "), ")", "\n")
  #   ), color = "black", face = "bold", size = 14)
  # )
  selection <- data %>% filter(selected == T)
  return(list(res.pca = res.pca, final = final, results = data, selection = selection))
}
selIndex <- function (Y, b, scale = FALSE) 
{
    if (scale) {
        return(scale(Y) %*% b)
    }
    return(Y %*% b)
}
```

## Index selection

```{r}
TestIndex_ <- index_dat %>%
  rownames_to_column("accession_name") %>%
  drop_na()

res.pca <- pca_index(data = TestIndex_, id = "accession_name", b = c(-5, 10, 10), percentage = 0.20)
res.pca_final <- res.pca$final
res.pca_final
ggsave(paste("images/selection",  trial_interest, Sys.Date(), ".png"), plot = res.pca_final, units = "in", dpi = 300, width = 10, height = 10)
res.pca$selection
selections <- res.pca$results %>% rownames_to_column(var = "accession_name") 
```

## Save the selections

```{r}
write.csv(selections, here::here("output", paste("01_", year_interest, trial_interest,
  "_selection_", Sys.Date(), ".csv", sep = "")), row.names = FALSE)
```






